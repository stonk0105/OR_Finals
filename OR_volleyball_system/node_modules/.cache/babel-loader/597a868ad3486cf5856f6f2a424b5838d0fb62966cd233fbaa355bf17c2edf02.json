{"ast":null,"code":"// 分組邏輯服務\nexport const generateGroups = (levelSheet, refTeamSheet) => {\n  // 整理隊伍等級資料\n  const teamLevels = {};\n  levelSheet.forEach(row => {\n    teamLevels[row.team_name] = row.level;\n  });\n\n  // 按等級分組隊伍\n  const teamsByLevel = {\n    1: [],\n    2: [],\n    3: [],\n    4: []\n  };\n  Object.entries(teamLevels).forEach(([team, level]) => {\n    teamsByLevel[level].push(team);\n  });\n\n  // 檢查每個等級的隊伍數量\n  const requiredTeamsPerLevel = 8;\n  for (let level = 1; level <= 4; level++) {\n    if (teamsByLevel[level].length < requiredTeamsPerLevel) {\n      throw new Error(`等級 ${level} 的隊伍數量不足：需要 ${requiredTeamsPerLevel} 隊，但只有 ${teamsByLevel[level].length} 隊`);\n    }\n  }\n\n  // 隨機分組\n  const groupedTeams = {};\n  const groups = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n\n  // 為 A-H 組分配隊伍\n  groups.forEach(group => {\n    const selectedTeams = [];\n    for (let level = 1; level <= 4; level++) {\n      const randomIndex = Math.floor(Math.random() * teamsByLevel[level].length);\n      const selectedTeam = teamsByLevel[level][randomIndex];\n      selectedTeams.push(selectedTeam);\n      teamsByLevel[level] = teamsByLevel[level].filter(team => team !== selectedTeam);\n    }\n    groupedTeams[group] = selectedTeams;\n  });\n\n  // 處理剩餘隊伍\n  const remainingTeams = [];\n  for (let level = 1; level <= 4; level++) {\n    remainingTeams.push(...teamsByLevel[level]);\n  }\n\n  // 為 I 組選擇隊伍\n  if (remainingTeams.length >= 3) {\n    const selectedTeams = [];\n    const availableLevels = [1, 2, 3].filter(level => teamsByLevel[level].length > 0);\n    if (availableLevels.length >= 3) {\n      for (let i = 0; i < 3; i++) {\n        const level = availableLevels[i];\n        const randomIndex = Math.floor(Math.random() * teamsByLevel[level].length);\n        const selectedTeam = teamsByLevel[level][randomIndex];\n        selectedTeams.push(selectedTeam);\n        teamsByLevel[level] = teamsByLevel[level].filter(team => team !== selectedTeam);\n      }\n    } else {\n      // 如果無法從不同等級選擇，則隨機選擇3隊\n      for (let i = 0; i < 3; i++) {\n        const randomIndex = Math.floor(Math.random() * remainingTeams.length);\n        selectedTeams.push(remainingTeams[randomIndex]);\n        remainingTeams.splice(randomIndex, 1);\n      }\n    }\n    groupedTeams['I'] = selectedTeams;\n  }\n\n  // 剩餘隊伍放入 J 組\n  const finalRemainingTeams = [];\n  for (let level = 1; level <= 4; level++) {\n    finalRemainingTeams.push(...teamsByLevel[level]);\n  }\n  if (finalRemainingTeams.length > 0) {\n    groupedTeams['J'] = finalRemainingTeams;\n  }\n  return groupedTeams;\n};\n\n// 生成裁判衝突表\nexport const generateRefereeConflicts = (groupedTeams, refTeamSheet) => {\n  const refConflicts = {};\n  const referees = [...new Set(refTeamSheet.map(row => row.name))];\n  referees.forEach(ref => {\n    refConflicts[ref] = {};\n    const conflictedTeams = new Set(refTeamSheet.filter(row => row.name === ref).map(row => row.dept));\n    Object.entries(groupedTeams).forEach(([group, teams]) => {\n      const hasConflict = teams.some(team => conflictedTeams.has(team));\n      refConflicts[ref][group] = hasConflict ? 0 : 1;\n    });\n  });\n  return refConflicts;\n};\n\n// 生成分組資料\nexport const generateGroupingData = (groupedTeams, levelSheet) => {\n  const groupingData = [];\n  Object.entries(groupedTeams).forEach(([group, teams]) => {\n    teams.forEach(team => {\n      groupingData.push({\n        Group: group,\n        Team: team,\n        Level: levelSheet.find(row => row.team_name === team).level\n      });\n    });\n  });\n  return groupingData;\n};\n\n// 生成裁判衝突資料\nexport const generateRefereeConflictData = refConflicts => {\n  return Object.entries(refConflicts).map(([ref, conflicts]) => ({\n    Referee: ref,\n    ...conflicts\n  }));\n};","map":{"version":3,"names":["generateGroups","levelSheet","refTeamSheet","teamLevels","forEach","row","team_name","level","teamsByLevel","Object","entries","team","push","requiredTeamsPerLevel","length","Error","groupedTeams","groups","group","selectedTeams","randomIndex","Math","floor","random","selectedTeam","filter","remainingTeams","availableLevels","i","splice","finalRemainingTeams","generateRefereeConflicts","refConflicts","referees","Set","map","name","ref","conflictedTeams","dept","teams","hasConflict","some","has","generateGroupingData","groupingData","Group","Team","Level","find","generateRefereeConflictData","conflicts","Referee"],"sources":["C:/Users/User/Desktop/OR-volleyball/src/services/scheduleService.js"],"sourcesContent":["// 分組邏輯服務\r\nexport const generateGroups = (levelSheet, refTeamSheet) => {\r\n  // 整理隊伍等級資料\r\n  const teamLevels = {};\r\n  levelSheet.forEach(row => {\r\n    teamLevels[row.team_name] = row.level;\r\n  });\r\n\r\n  // 按等級分組隊伍\r\n  const teamsByLevel = {1: [], 2: [], 3: [], 4: []};\r\n  Object.entries(teamLevels).forEach(([team, level]) => {\r\n    teamsByLevel[level].push(team);\r\n  });\r\n\r\n  // 檢查每個等級的隊伍數量\r\n  const requiredTeamsPerLevel = 8;\r\n  for (let level = 1; level <= 4; level++) {\r\n    if (teamsByLevel[level].length < requiredTeamsPerLevel) {\r\n      throw new Error(`等級 ${level} 的隊伍數量不足：需要 ${requiredTeamsPerLevel} 隊，但只有 ${teamsByLevel[level].length} 隊`);\r\n    }\r\n  }\r\n\r\n  // 隨機分組\r\n  const groupedTeams = {};\r\n  const groups = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\r\n  \r\n  // 為 A-H 組分配隊伍\r\n  groups.forEach(group => {\r\n    const selectedTeams = [];\r\n    for (let level = 1; level <= 4; level++) {\r\n      const randomIndex = Math.floor(Math.random() * teamsByLevel[level].length);\r\n      const selectedTeam = teamsByLevel[level][randomIndex];\r\n      selectedTeams.push(selectedTeam);\r\n      teamsByLevel[level] = teamsByLevel[level].filter(team => team !== selectedTeam);\r\n    }\r\n    groupedTeams[group] = selectedTeams;\r\n  });\r\n\r\n  // 處理剩餘隊伍\r\n  const remainingTeams = [];\r\n  for (let level = 1; level <= 4; level++) {\r\n    remainingTeams.push(...teamsByLevel[level]);\r\n  }\r\n\r\n  // 為 I 組選擇隊伍\r\n  if (remainingTeams.length >= 3) {\r\n    const selectedTeams = [];\r\n    const availableLevels = [1, 2, 3].filter(level => teamsByLevel[level].length > 0);\r\n    \r\n    if (availableLevels.length >= 3) {\r\n      for (let i = 0; i < 3; i++) {\r\n        const level = availableLevels[i];\r\n        const randomIndex = Math.floor(Math.random() * teamsByLevel[level].length);\r\n        const selectedTeam = teamsByLevel[level][randomIndex];\r\n        selectedTeams.push(selectedTeam);\r\n        teamsByLevel[level] = teamsByLevel[level].filter(team => team !== selectedTeam);\r\n      }\r\n    } else {\r\n      // 如果無法從不同等級選擇，則隨機選擇3隊\r\n      for (let i = 0; i < 3; i++) {\r\n        const randomIndex = Math.floor(Math.random() * remainingTeams.length);\r\n        selectedTeams.push(remainingTeams[randomIndex]);\r\n        remainingTeams.splice(randomIndex, 1);\r\n      }\r\n    }\r\n    groupedTeams['I'] = selectedTeams;\r\n  }\r\n\r\n  // 剩餘隊伍放入 J 組\r\n  const finalRemainingTeams = [];\r\n  for (let level = 1; level <= 4; level++) {\r\n    finalRemainingTeams.push(...teamsByLevel[level]);\r\n  }\r\n  if (finalRemainingTeams.length > 0) {\r\n    groupedTeams['J'] = finalRemainingTeams;\r\n  }\r\n\r\n  return groupedTeams;\r\n};\r\n\r\n// 生成裁判衝突表\r\nexport const generateRefereeConflicts = (groupedTeams, refTeamSheet) => {\r\n  const refConflicts = {};\r\n  const referees = [...new Set(refTeamSheet.map(row => row.name))];\r\n\r\n  referees.forEach(ref => {\r\n    refConflicts[ref] = {};\r\n    const conflictedTeams = new Set(\r\n      refTeamSheet\r\n        .filter(row => row.name === ref)\r\n        .map(row => row.dept)\r\n    );\r\n\r\n    Object.entries(groupedTeams).forEach(([group, teams]) => {\r\n      const hasConflict = teams.some(team => conflictedTeams.has(team));\r\n      refConflicts[ref][group] = hasConflict ? 0 : 1;\r\n    });\r\n  });\r\n\r\n  return refConflicts;\r\n};\r\n\r\n// 生成分組資料\r\nexport const generateGroupingData = (groupedTeams, levelSheet) => {\r\n  const groupingData = [];\r\n  Object.entries(groupedTeams).forEach(([group, teams]) => {\r\n    teams.forEach(team => {\r\n      groupingData.push({\r\n        Group: group,\r\n        Team: team,\r\n        Level: levelSheet.find(row => row.team_name === team).level\r\n      });\r\n    });\r\n  });\r\n  return groupingData;\r\n};\r\n\r\n// 生成裁判衝突資料\r\nexport const generateRefereeConflictData = (refConflicts) => {\r\n  return Object.entries(refConflicts).map(([ref, conflicts]) => ({\r\n    Referee: ref,\r\n    ...conflicts\r\n  }));\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}